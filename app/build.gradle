apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'spoon'
apply from: 'checkstyle/checkstyle.gradle'
apply from: './jacoco.gradle'

apply from: '../deps.gradle'

ext {
    APPLICATION_ID = "com.flatstack.android"
    isCI = "true".equals(System.getenv("CI"))
    commitMessage = 'git log -1 --pretty=%B'.execute().text.trim()
//    STORE_PASSWORD = System.getenv("PROJECT_NAME_STORE_PASSWORD")
//    KEY_ALIAS = System.getenv("PROJECT_NAME_KEY_ALIAS")
//    KEY_PASSWORD = System.getenv("PROJECT_NAME_KEY_PASSWORD")
}

android {
    compileSdkVersion versions.TARGET_SDK_VERSION
    buildToolsVersion versions.BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion versions.MIN_SDK_VERSION
        targetSdkVersion versions.TARGET_SDK_VERSION

        applicationId APPLICATION_ID
        versionCode 1
        versionName '1.0-beta'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        com.android.ddmlib.DdmPreferences.setTimeOut(60000)
    }

    productFlavors {
        staging {
            buildConfigField "String", "API_URL", "\"http://api.openweathermap.org/\""
            buildConfigField "String", "API_KEY", "\"2e9e447d7839fa8cd54ac940f3689d9e\""
            applicationIdSuffix ".staging"
        }

        dev {
            buildConfigField "String", "API_URL", "\"https://example-staging.com\""
            applicationIdSuffix ".staging"
            minSdkVersion 21
        }

        production {
            buildConfigField "String", "API_URL", "\"http://api.openweathermap.org/\""
            buildConfigField "String", "API_KEY", "\"2e9e447d7839fa8cd54ac940f3689d9e\""
        }
    }

    signingConfigs {
        debug {
            storeFile file("$rootDir/debug.jks")
            storePassword "12345678"
            keyAlias "debug"
            keyPassword "12345678"
        }
//        release {
//            storeFile file("$rootDir/project_name.jks")
//            storePassword STORE_PASSWORD
//            keyAlias KEY_ALIAS
//            keyPassword KEY_PASSWORD
//        }
    }

    buildTypes {
        debug {
            if (isCI) {
                testCoverageEnabled true
            }
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        if (isCI) {
            unitTests.all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        preDexLibraries = !isCI
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    lintOptions {
        textReport true
        textOutput "stdout"
        lintConfig file("$projectDir/lint.xml")
        warningsAsErrors true
    }

    configurations.all {
        resolutionStrategy.force "com.android.support:support-annotations:$versions.support"
    }
}

repositories {
    mavenCentral()
}

apply from: '../test-deps.gradle'

dependencies {
    compile supportLibs
    compile rxJavaLibs
    compile networkLibs

    provided 'org.jetbrains:annotations:13.0'
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.jakewharton:butterknife:7.0.0' // view injection
    compile 'com.github.bumptech.glide:glide:3.7.0'

    testCompile unitTestLibs
    androidTestCompile androidTestsLibs
}

// Grant animation permissions to avoid test failure because of ui sync.
task grantAnimationPermissions(type: Exec, dependsOn: ['installStagingDebug', 'installProductionDebug']) {
    group = 'test'
    description = 'Grant permissions for testing.'

    def absolutePath = file('..') // Get project absolute path
    commandLine "$absolutePath/app/set_animation_permissions.sh com.flatstack.android".split(" ")
}

// Source: http://stackoverflow.com/q/29908110/112705
afterEvaluate {
    // When launching individual tests from Android Studio, it seems that only the assemble tasks
    // get called directly, not the install* versions
    tasks.each { task ->
        if (task.name.endsWith('AndroidTest')) {
            task.dependsOn grantAnimationPermissions
        }
    }
}

apply from: "quality.gradle"